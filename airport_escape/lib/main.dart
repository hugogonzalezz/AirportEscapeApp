// Flutter app entry point and theme setup
import 'package:airport_escape/l10n/app_localizations.dart';

import 'settings/theme_toggle.dart'; 
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'firebase_options.dart'; // generated by flutterfire configure
import 'landing_page.dart';
import 'package:provider/provider.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'settings/locale_provider.dart';
// If you need AppLocalizations, enable Flutter's gen_l10n in pubspec.yaml and run `flutter gen-l10n`.

// Import RTDB test page (dev only, not active by default)
import 'database_test_page.dart';

// App-wide color constants
const kPrimaryColor = Color.fromARGB(255, 18, 71, 156);
const kBackgroundColor = Color(0xFFE0F7FA);

// Main function: initializes Firebase and loads tne .env file then launches the app
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
  await dotenv.load(fileName: ".env");
} catch (e) {
  debugPrint("No .env file found, skipping dotenv load");
}


  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // DEV ONLY: log RTDB connection status
  FirebaseDatabase.instance.ref('.info/connected').onValue.listen((e) {
    // ignore: avoid_print
    print('RTDB connected: ${e.snapshot.value == true}');
  });

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => LocaleProvider()),
      ],
      child: const MyApp(),
    ),
  );
}


// Root widget: sets up MaterialApp and theme
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, child) {
        final locale = context.watch<LocaleProvider>().locale;
        return MaterialApp(
          debugShowCheckedModeBanner: false,
          title: 'Airport Escape, for passengers by passengers',
          theme: ThemeData(
            primaryColor: kPrimaryColor,
            scaffoldBackgroundColor: kBackgroundColor,
            appBarTheme: const AppBarTheme(
              backgroundColor: kPrimaryColor,
              foregroundColor: Colors.white,
            ),
          ),
          darkTheme: ThemeData.dark(),
          themeMode: themeProvider.themeMode, // line that enables darkmode!
          locale: locale,
          localizationsDelegates: const [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],
          supportedLocales: AppLocalizations.supportedLocales,
          home: const MyHomePage(),
        );
      },
    );
  }
}
