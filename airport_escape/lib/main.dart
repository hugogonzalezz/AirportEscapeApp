// Flutter app entry point and theme setup
import 'package:airport_escape/l10n/app_localizations.dart';

import 'settings/theme_toggle.dart'; 
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart'; // added
import 'firebase_options.dart'; // generated by flutterfire configure
import 'landing_page.dart';
import 'package:provider/provider.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'settings/locale_provider.dart';
// If you need AppLocalizations, enable Flutter's gen_l10n in pubspec.yaml and run `flutter gen-l10n`.

// Import RTDB test page (dev only, not active by default)
import 'database_test_page.dart';

// App-wide color constants
const kPrimaryColor = Color.fromARGB(255, 18, 71, 156);
const kBackgroundColor = Color(0xFFE0F7FA);

// Main function: initializes Firebase and loads tne .env file then launches the app
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
  await dotenv.load(fileName: ".env");
} catch (e) {
  debugPrint("No .env file found, skipping dotenv load");
}


  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // DEV ONLY: log RTDB connection status
  FirebaseDatabase.instance.ref('.info/connected').onValue.listen((e) {
    // ignore: avoid_print
    print('RTDB connected: ${e.snapshot.value == true}');
  });

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => LocaleProvider()),
      ],
      child: const MyApp(),
    ),
  );
}


// Root widget: sets up MaterialApp and theme
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, child) {
        final locale = context.watch<LocaleProvider>().locale;
        return MaterialApp(
          debugShowCheckedModeBanner: false,
          title: 'Airport Escape, for passengers by passengers',
          theme: ThemeData(
            primaryColor: kPrimaryColor,
            scaffoldBackgroundColor: kBackgroundColor,
            appBarTheme: const AppBarTheme(
              backgroundColor: kPrimaryColor,
              foregroundColor: Colors.white,
            ),
          ),
          darkTheme: ThemeData.dark(),
          themeMode: themeProvider.themeMode, // line that enables darkmode!
          locale: locale,
          localizationsDelegates: const [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],
          supportedLocales: AppLocalizations.supportedLocales,
          home: const _AuthGate(), // added
        );
      },
    );
  }
}

// auth gate: waits for login, then checks roles/<uid>/isAdmin
class _AuthGate extends StatelessWidget {
  const _AuthGate({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }
        final user = snap.data;
        if (user == null) return const _LoginPage(); // minimal login below

        // fetch roles/<uid>/isAdmin once
        return FutureBuilder<DataSnapshot>(
          future: FirebaseDatabase.instance.ref('roles/${user.uid}/isAdmin').get(),
          builder: (context, roleSnap) {
            if (roleSnap.connectionState == ConnectionState.waiting) {
              return const Scaffold(body: Center(child: CircularProgressIndicator()));
            }
            final isAdmin = (roleSnap.data?.value == true);
            // ignore: avoid_print
            print('isAdmin for ${user.uid}: $isAdmin'); // minimal log

            // wrap existing home and add admin-only test button
            return _Shell(isAdmin: isAdmin); // added
          },
        );
      },
    );
  }
}

// minimal email/password login
class _LoginPage extends StatefulWidget {
  const _LoginPage({super.key});
  @override
  State<_LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<_LoginPage> {
  final _email = TextEditingController();
  final _pw = TextEditingController();
  bool _busy = false;
  String? _error;

  Future<void> _signIn() async {
    setState(() { _busy = true; _error = null; });
    try {
      await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: _email.text.trim(),
        password: _pw.text.trim(),
      );
    } on FirebaseAuthException catch (e) {
      setState(() => _error = e.message);
    } finally {
      if (mounted) setState(() => _busy = false);
    }
  }

  Future<void> _register() async {
    setState(() { _busy = true; _error = null; });
    try {
      await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _email.text.trim(),
        password: _pw.text.trim(),
      );
      // make admin via RTDB roles if needed
    } on FirebaseAuthException catch (e) {
      setState(() => _error = e.message);
    } finally {
      if (mounted) setState(() => _busy = false);
    }
  }

  @override
  void dispose() {
    _email.dispose();
    _pw.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sign in')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(controller: _email, keyboardType: TextInputType.emailAddress, decoration: const InputDecoration(labelText: 'Email')),
            const SizedBox(height: 8),
            TextField(controller: _pw, decoration: const InputDecoration(labelText: 'Password'), obscureText: true),
            const SizedBox(height: 12),
            Row(
              children: [
                ElevatedButton(onPressed: _busy ? null : _signIn, child: const Text('Sign in')),
                const SizedBox(width: 12),
                OutlinedButton(onPressed: _busy ? null : _register, child: const Text('Register')),
              ],
            ),
            if (_error != null) ...[
              const SizedBox(height: 12),
              Text(_error!, style: const TextStyle(color: Colors.red)),
            ],
            if (_busy) ...[
              const SizedBox(height: 12),
              const LinearProgressIndicator(),
            ],
          ],
        ),
      ),
    );
  }
}

// wraps existing home and adds an admin-only test button
class _Shell extends StatelessWidget {
  final bool isAdmin;
  const _Shell({super.key, required this.isAdmin});

  Future<void> _saveAnnouncement() async {
    final u = FirebaseAuth.instance.currentUser;
    final ref = FirebaseDatabase.instance.ref('content/announcements');
    await ref.update({
      'text': 'Hello from Airport Escape!',
      'updatedAt': DateTime.now().millisecondsSinceEpoch,
      'updatedBy': u?.uid,
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: const MyHomePage(), // your existing home untouched
      floatingActionButton: isAdmin
          ? FloatingActionButton(
              onPressed: _saveAnnouncement,
              child: const Icon(Icons.save),
            )
          : null, // no button for non-admins
    );
  }
}
